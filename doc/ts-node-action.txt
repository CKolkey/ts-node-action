*ts-node-action.txt*        For NVIM v0.8.0       Last change: 2023 January 13

==============================================================================
Table of Contents                           *ts-node-action-table-of-contents*

1. TS Node Action                              |ts-node-action-ts-node-action|
  - Installation                                 |ts-node-action-installation|
  - Usage                                               |ts-node-action-usage|
  - Configuration                               |ts-node-action-configuration|
  - Writing your own Node Actions|ts-node-action-writing-your-own-node-actions|
  - API                                                   |ts-node-action-api|
  - Helpers                                           |ts-node-action-helpers|
  - Builtin Actions                           |ts-node-action-builtin-actions|
  - Contributing                                 |ts-node-action-contributing|

==============================================================================
1. TS Node Action                              *ts-node-action-ts-node-action*

A framework for running functions on Tree-sitter nodes, and updating the buffer
with the result.

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210154055-8851210e-e8e1-4ba3-a474-0be373df8d1b.gif" title="fig:"/>
<p class="caption">cycle case</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210153839-5009dbed-db7a-4b1c-b5c9-879b90f32a64.gif" title="fig:"/>
<p class="caption">multiline</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210153712-8be29018-00a3-427f-8a59-959e705e12c6.gif" title="fig:"/>
<p class="caption">condition formatting</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210153716-2fde6101-352b-4ef9-ba00-0842e6749201.gif" title="fig:"/>
<p class="caption">ternerizing</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210153726-3f5da644-ae1f-4288-b52b-e12a9c757293.gif" title="fig:"/>
<p class="caption">operator flipflop</p>
</div>

<div class="figure">
<img src="https://user-images.githubusercontent.com/7228095/210153731-a2c2a717-e7ae-4330-9664-11ba4ed3c005.gif" title="fig:"/>
<p class="caption">split join blocks</p>
</div>

INSTALLATION                                     *ts-node-action-installation*

`Lazy.nvim`:

>
    {
        'ckolkey/ts-node-action',
         dependencies = { 'nvim-treesitter' },
         config = function() -- Optional
             require("ts-node-action").setup({})
         end
    },
<


`packer`:

>
    use({
        'ckolkey/ts-node-action',
         requires = { 'nvim-treesitter' },
         config = function() -- Optional
             require("ts-node-action").setup({})
         end
    })
<


**Note**: It’s not required to call `require("ts-node-action").setup()` to
initialize the plugin, but a table can be passed into the setup function to
specify new actions for nodes or additional filetypes.

USAGE                                                   *ts-node-action-usage*

Bind `require("ts-node-action").node_action` to something. This is left up to
the user.

For example, this would bind the function to `K`:

>
    vim.keymap.set({ "n" }, "K", require("ts-node-action").node_action, { desc = "Trigger Node Action" })
<


If `tpope/vim-repeat` is installed, calling `node_action()` is dot-repeatable.

CONFIGURATION                                   *ts-node-action-configuration*

The `setup()` function accepts a table that conforms to the following schema:

>
    {
        ['*'] = { -- Global table is checked for all filetypes
            ["node_type"] = fn,
            ...
        },
        filetype = {
            ["node_type"] = fn,
            ...
        },
        ...
    }
<



- `filetype` should be the value of `vim.o.filetype`, or `'*'` for the global table
- `node_type` should be the value of `vim.treesitter.get_node_at_cursor()`


A definition on the `filetype` table will take precedence over the `*` (global)
table.

MULTIPLE ACTIONS FOR A NODE TYPE ~

To define multiple actions for a node type, structure your `node_type` value as
a table of tables, like so:

>
    ["node_type"] = {
      { function_one, name = "Action One" },
      { function_two, name = "Action Two" },
    }
<


`vim.ui.select` will use the value of `name` to when prompting you on which
action to perform.

WRITING YOUR OWN NODE ACTIONS   *ts-node-action-writing-your-own-node-actions*

All node actions should be a function that takes one argument: the tree-sitter
node under the cursor.

You can read more about their API via `:help tsnode`

This function can return one or two values:


- The first being the text to replace the node with. The replacement text can be
    either a `"string"` or `{ "table", "of", "strings" }`. With a table of strings,
    each string will be on it’s own line.
- The second (optional) returned value is a table of options. Supported keys are:
    `cursor`, `callback`, and `format`


Here’s how that can look.

>
    {
      cursor   = { row = 0, col = 0 },
      callback = function() ... end,
      format   = true
    }
<


                                                     *ts-node-action-`cursor`*

`cursor`                               If the `cursor` key is present with an
                                       empty table value, the cursor will be
                                       moved to the start of the line where the
                                       current node is (`row = 0` `col = 0`
                                       relative to node `start_row` and
                                       `start_col`).


                                                   *ts-node-action-`callback`*

`callback`                             If `callback` is present, it will simply
                                       get called without arguments after the
                                       buffer has been updated, and after the
                                       cursor has been positioned.


                                                     *ts-node-action-`format`*

`format`                               Boolean value. If `true`, will run `=`
                                       operator on new buffer text. Requires
                                       `indentexpr` to be set.


Here’s a simplified example of how a node-action function gets called:

>
    local action = node_actions[vim.o.filetype][node:type()]
    local replacement, opts = action(node)
    replace_node(node, replacement, opts or {})
<


API                                                       *ts-node-action-api*

`require("ts-node-action").node_action()`
Main function for plugin. Should be assigned by user, and when called will attempt to run the assigned function for the
node your cursor is currently on.

<hr>

`require("ts-node-action").debug()` Prints some helpful information about the
current node, as well as the loaded node actions for all filetypes

HELPERS                                               *ts-node-action-helpers*

`require("ts-node-action.helpers").node_text(node)`

>
    @node: tsnode
    @return: string
<


Returns the text of the specified node.

<hr>

`require("ts-node-action.helpers").multiline_node(node)`

>
    @node: tsnode
    @return: boolean
<


Returns true if node spans multiple lines, and false if it’s a single line.

<hr>

`require("ts-node-action.helpers").padded_node_text(node, padding)`

>
    @node: tsnode
    @padding: table
    @return: string
<


For formatting unnamed tsnodes. For example, if you pass in an unnamed node
representing the text `,`, you could pass in a `padding` table (below) to add a
trailing whitespace to `,` nodes.

>
    { [","] = "%s " }
<


Nodes not specified in table are returned unchanged.

BUILTIN ACTIONS                               *ts-node-action-builtin-actions*

Builtin actions are all higher-order functions so they can easily have options
overridden on a per-filetype basis. Check out the implementations under
`lua/filetypes/` to see how!

>
    local actions = require("ts-node-actions.actions")
<


**Global** _(Applies to all filetypes)_

>
    {
      ["true"]          = actions.toggle_boolean(),
      ["false"]         = actions.toggle_boolean(),
      ["identifier"]    = actions.cycle_case(),
      ["variable_name"] = actions.cycle_case(),
    }
<


**Ruby**

>
    {
      ["true"]              = actions.toggle_boolean(),
      ["false"]             = actions.toggle_boolean(),
      ["array"]             = actions.toggle_multiline(),
      ["hash"]              = actions.toggle_multiline(),
      ["argument_list"]     = actions.toggle_multiline(),
      ["method_parameters"] = actions.toggle_multiline(),
      ["identifier"]        = actions.cycle_case(),
      ["constant"]          = actions.cycle_case(),
      ["block"]             = actions.toggle_block(),
      ["do_block"]          = actions.toggle_block(),
      ["binary"]            = actions.toggle_operator(),
      ["if"]                = actions.handle_conditional(),
      ["unless"]            = actions.handle_conditional(),
      ["if_modifier"]       = actions.multiline_conditional(),
      ["unless_modifier"]   = actions.multiline_conditional(),
      ["conditional"]       = actions.expand_ternary(),
      ["pair"]              = actions.toggle_hash_style(),
    }
<


**JSON**

>
    {
      ["object"] = actions.toggle_multiline(),
      ["array"]  = actions.toggle_multiline(),
    }
<


**Lua**

>
    {
      ["table_constructor"] = actions.toggle_multiline(),
      ["arguments"]         = actions.toggle_multiline(),
      ["true"]              = actions.toggle_boolean(),
      ["false"]             = actions.toggle_boolean(),
      ["identifier"]        = actions.cycle_case(),
    }
<


**Javascript** & **Typescript**

>
    {
      ["object"]              = actions.toggle_multiline(),
      ["array"]               = actions.toggle_multiline(),
      ["statement_block"]     = actions.toggle_multiline(),
      ["identifier"]          = actions.cycle_case(),
      ["property_identifier"] = actions.cycle_case(),
      ["true"]                = actions.toggle_boolean(),
      ["false"]               = actions.toggle_boolean(),
    }
<


**Python**

>
    {
      ["dictionary"]    = actions.toggle_multiline(),
      ["list"]          = actions.toggle_multiline(),
      ["argument_list"] = actions.toggle_multiline(),
      ["parameters"]    = actions.toggle_multiline(),
      ["true"]          = actions.toggle_boolean(),
      ["false"]         = actions.toggle_boolean(),
      ["identifier"]    = actions.cycle_case(),
    }
<


CONTRIBUTING                                     *ts-node-action-contributing*

If you come up with something that would be a good fit, pull requests for node
actions are welcome!

Visit: https://www.github.com/ckolkey/ts-node-action

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
